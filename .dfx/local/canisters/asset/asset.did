type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   assetType: AssetType;
   chunkIndex: nat;
   id: AssetId;
 };
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type StreamingCallback = func (StreamingCallbackToken) ->
                          (StreamingCallbackResponse) query;
type Result_3 = 
 variant {
   err: text;
   ok;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: AssetId;
 };
type Result = 
 variant {
   err: text;
   ok: ChunkId;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type ChunkId = nat;
type AssetType = 
 variant {
   FilterImage;
   MainImage;
   Other;
 };
type AssetId = text;
type Asset = 
 record {
   assetType: AssetType;
   chunkIds: vec ChunkId;
   contentType: text;
   createdAt: int;
   filename: text;
   id: AssetId;
   owner: principal;
 };
service : {
  acceptCycles: () -> ();
  deleteAsset: (AssetId) -> (Result_3);
  finishAssetUpload: (AssetId) -> (Result_2);
  getAssetInfo: (AssetId) -> (opt Asset) query;
  getMyAssets: () -> (vec Asset) query;
  http_request: (HttpRequest) -> (HttpResponse) query;
  startAssetUpload: (text, text, AssetType) -> (Result_1);
  uploadChunk: (AssetId, blob) -> (Result);
}
